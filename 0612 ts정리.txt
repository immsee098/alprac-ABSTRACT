chap1
단점: 언어가 잘 정제되기 이전에 출시됨

다소 단점이 있기에 대체/확장 언어로 타입스크립트를 채용했다.

1) 정적 타입
자바스크립트의 동적 타이핑을 억제시켜 가독성을 높히고 디버깅을 도와준다.

2) 객체지향 프로그래밍 지원
타 언어를 학습한 사용자를 도와준다

3) angular에 적용

* * *

chap 2
개발환경 구축 파트로 스킵


* * *

chap 3

1) 변수 뒤에 변수명을 붙여서 타입 선언 가능
ex) let foo: string~

뒤에 오는 타입이 맞지 않을 경우 compile error뜸


2) 정적 타이핑
-> 변수에 할당할 값의 타입에 따라 사전에 타입을 명시적으로 선언

- 타입스크립트는 정적 타이핑을 지원하며, 맞지 않은 값을 할당하면 에러 발생


3) 타입 추론
그러나 선언 생략시 동적으로 타입 결정됨. 추론 타입에 의해 타입 결정 후 다시 할당할 때 잘못 할당하면 에러가 난다.


* * *

chap 4

1) 접근제한자
타입스크립트에서는 public, private, protected 지원. js에서는 미지원이다.

2) 생성자 파라미터에 접근 제한자 선언
생성자 파라미터는 암묵적으로 클래스 프로퍼티로 선언되고 생성자 내부에서 별도의 초기화가 없어도 암묵적으로 초기화가 수행된다.

3) readonly 키워드
해당 키워드 사용시 값을 할당할 수 없고 오직 읽기만 가능한 상태가 된다. 

4) static 키워드
- 정적 메소드는 클래스의 인스턴스가 아닌 클래스 이름으로 호출한다. 따라서 클래스의 인스턴스를 생성하지 않아도 호출할 수 있다.
- Typescript에서는 static 키워드를 클래스 프로퍼티에도 사용할 수 있다. 

5) 추상 클래스
- 상속만을 위해 사용. 
- 추상 메소드는 내용이 없이 메소드 이름과 타입만이 선언된 메소드를 말하며 선언할 때 abstract 키워드를 사용한다. 


* * *

chap 6

1) 함수 또는 클래스를 정의하는 시점에 매개변수나 반환값의 타입을 선언하기 어려운 경우가 있다.
    -> 이 경우 []으로 표현하여 나중에 정한다. 그러나 해당 경우 배열의 타입이 모두 같지 않은 경우가 발생.
        ~> 따라서 제네릭 사용

2) 제네릭이란
선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다. 
 장점: 한 번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.
 사용법: 제네릭의 식별자로 T를 흔히 사용한다.